

  <div class="jumbotron">
    <h1> ToDo List for <%= user.googlename %> </h1>
    <p> Here is your list of things to do! </p>
     <div id="list">
      <% items.forEach(item => { %>
          <div id="<%= item._id %>">
           <a onclick="remove('<%=item._id %>')">X</a>
           ::
           <%= item.item %>
          </div>

      <% }) %>
    </div>

    <!-- Here is where we get the new todo item -->
    new item: <input type="text" id="item" name="item"><br>
    <input type="submit" value="store" onclick="storeData()">


  </div>

  <div>
    <input type="text" id="num"><br>
    <button onclick="square()">square it</button><br>
    result = <span id="result"></span>
  </div>

  <script>

    function square(){
      const x = document.getElementById("num").value
      const n = parseInt(x)
      console.log(`x=${x}  n=${n} n^2 = ${n*n}`)
      document.getElementById("result").innerHTML= n*n
    }
    /*
      Here is the code to maintain the todolist entirely locally
    */
      storeData =
       async () => {
         try{
              let newtodo = document.getElementById('item').value
              let data = await postData('/todoAjax', { item: newtodo})
              let theList = document.getElementById('list')
              document.getElementById('item').value=""
              theList.innerHTML = theList.innerHTML+
               `<div id="${data._id}">
                <a onclick="remove('${data._id}')">X</a>
                ::
                ${newtodo}
               </div>`
          } catch (e){
          alert("error! "+e)
        }
      }

      remove =
        async (x) => {
          try{
            let oldtodo = document.getElementById(x)
            let data = await postData(`/todoAjax/remove`,{itemId:x})
            console.log(JSON.stringify(data,null,2))
            oldtodo.parentNode.removeChild(oldtodo);
          } catch(e) {
            alert(`error3: ${e}`)
          }
   }

   /*
     postData will run a postRequest and return the result
   */
  async function postData(url = '', data = {}) {
  // Default options are marked with *
  const response = await fetch(url, {
    method: 'POST', // *GET, POST, PUT, DELETE, etc.
    mode: 'cors', // no-cors, *cors, same-origin
    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    credentials: 'same-origin', // include, *same-origin, omit
    headers: {
      'Content-Type': 'application/json'
      // 'Content-Type': 'application/x-www-form-urlencoded',
    },
    redirect: 'follow', // manual, *follow, error
    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    body: JSON.stringify(data) // body data type must match "Content-Type" header
  });
  return response.json(); // parses JSON response into native JavaScript objects
}



  </script>
